/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stock;

import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.xml.crypto.Data;
import static stock.Master.purchaseItem;
import static stock.StockData.connection;
import static stock.StockData.stmt;

/**
 *
 * @author st8511x
 */
public class PurchaseItem extends javax.swing.JFrame {

    StockData stockData = new StockData();

    /**
     * Creates new form PurchaseItem2
     */
    String selectedItemKey;

    public PurchaseItem() {
        initComponents();
        lblIemKey.setVisible(false);
        pnlBasket.setVisible(false);
        cmbItemSelect.setEditable(true);//so that user can type in it for autocomplete

//ArrayList<String> productList = StockData.GetProducts();
//       //populating the combo box by filling it with the array list 
//cmbItemSelect.setModel(new javax.swing.DefaultComboBoxModel<>(productList.toArray(new String[0])));
        //cant instantiate an abstract class therefore it is being directly used as an parameter 
        cmbQuantity.addItemListener(new ItemListener() {
            // Listening if new quantity of the combo box has been selected by user
            public void itemStateChanged(ItemEvent event) {
                //JComboBox comboBox = (JComboBox) event.getSource();

                if (event.getStateChange() == ItemEvent.SELECTED) {
                    CalculateBill();

                }
                if (event.getStateChange() == ItemEvent.DESELECTED) {
                    CalculateBill();
                }
            }
        });

    }

    public void CalculateBill() throws NumberFormatException {
        //output BILL as the Quantity Changes              
        int quantityEnteredInt = Integer.parseInt(cmbQuantity.getSelectedItem().toString()); //convert string to integer for calculating
        double price = StockData.getPrice(selectedItemKey);
        double bill = quantityEnteredInt * price;
        DecimalFormat pounds = new DecimalFormat("Â£#,##0.00");
        String billStr = pounds.format(bill);//format bill correctly before it can be output
        Master.purchaseItem.txtBill.setText(billStr);//output in string format
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        ShStockDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("ShStockDBPU").createEntityManager();
        basketQuery = java.beans.Beans.isDesignTime() ? null : ShStockDBPUEntityManager.createQuery("SELECT b FROM Basket b");
        basketList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : basketQuery.getResultList();
        cmbItemSelect = new javax.swing.JComboBox();
        pnl1 = new javax.swing.JPanel();
        txtItemPrice = new java.awt.TextField();
        jLabel3 = new javax.swing.JLabel();
        txtItemName = new java.awt.TextField();
        txtStockInitial = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblPic = new javax.swing.JLabel();
        pnl2 = new javax.swing.JPanel();
        txtBill = new java.awt.TextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cmbQuantity = new javax.swing.JComboBox();
        btnAddToBasket = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        lblIemKey = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        pnlBasket = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        basketTable = new javax.swing.JTable();
        btnPurchase = new javax.swing.JButton();
        txtBasketBill = new java.awt.TextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnRecalculate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jLabel6.setText("jLabel6");

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Purchase Item ");
        setExtendedState(6);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(400, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbItemSelect.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        cmbItemSelect.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null));
        cmbItemSelect.setLightWeightPopupEnabled(false);
        cmbItemSelect.setEditable(true);
        cmbItemSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbItemSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 260, -1));

        pnl1.setBackground(new java.awt.Color(153, 204, 255));
        pnl1.setDoubleBuffered(false);
        pnl1.setLayout(null);

        txtItemPrice.setEditable(false);
        txtItemPrice.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        pnl1.add(txtItemPrice);
        txtItemPrice.setBounds(20, 120, 90, 35);

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel3.setText("Price");
        pnl1.add(jLabel3);
        jLabel3.setBounds(20, 90, 60, 30);

        txtItemName.setEditable(false);
        txtItemName.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        pnl1.add(txtItemName);
        txtItemName.setBounds(20, 40, 170, 40);

        txtStockInitial.setEditable(false);
        txtStockInitial.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        txtStockInitial.setName(""); // NOI18N
        txtStockInitial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockInitialActionPerformed(evt);
            }
        });
        pnl1.add(txtStockInitial);
        txtStockInitial.setBounds(120, 120, 71, 35);

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setText("Stock");
        pnl1.add(jLabel2);
        jLabel2.setBounds(120, 90, 70, 30);

        jLabel7.setText("jLabel7");
        pnl1.add(jLabel7);
        jLabel7.setBounds(280, -40, 34, 14);

        lblPic.setBorder(new javax.swing.border.MatteBorder(null));
        pnl1.add(lblPic);
        lblPic.setBounds(210, 20, 220, 170);

        pnl2.setBackground(new java.awt.Color(131, 171, 251));
        pnl2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBill.setEditable(false);
        txtBill.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        txtBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBillActionPerformed(evt);
            }
        });
        pnl2.add(txtBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 90, 40));

        jLabel17.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel17.setText("Bill");
        pnl2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 60, -1));

        jLabel18.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel18.setText("Quantity ");
        pnl2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 100, 50));

        cmbQuantity.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        cmbQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbQuantityActionPerformed(evt);
            }
        });
        pnl2.add(cmbQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 50, 40));

        btnAddToBasket.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnAddToBasket.setText("ADD TO BASKET");
        btnAddToBasket.setToolTipText("Add to Basket");
        btnAddToBasket.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddToBasket.setBorderPainted(false);
        btnAddToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToBasketActionPerformed(evt);
            }
        });
        pnl2.add(btnAddToBasket, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 140, 40));

        pnl1.add(pnl2);
        pnl2.setBounds(20, 210, 360, 90);

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel15.setText("Name");
        pnl1.add(jLabel15);
        jLabel15.setBounds(20, 10, 70, 30);

        lblIemKey.setText("key");
        pnl1.add(lblIemKey);
        lblIemKey.setBounds(140, 170, 50, 20);

        getContentPane().add(pnl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 450, 330));

        btnSearch.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stock/Resources/magnifier12.png"))); // NOI18N
        btnSearch.setToolTipText("Click to find Item");
        btnSearch.setBorder(null);
        btnSearch.setBorderPainted(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 90, 80));

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel8.setText("Find Item");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 100, -1));

        pnlBasket.setBackground(new java.awt.Color(153, 204, 255));
        pnlBasket.setLayout(null);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, basketList, basketTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${productid}"));
        columnBinding.setColumnName("Productid");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${price}"));
        columnBinding.setColumnName("Price");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantity}"));
        columnBinding.setColumnName("Quantity");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${deleted}"));
        columnBinding.setColumnName("Remove Item?");
        columnBinding.setColumnClass(Boolean.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(basketTable);

        pnlBasket.add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 540, 330);

        btnPurchase.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnPurchase.setText("PURCHASE");
        btnPurchase.setToolTipText("Add to Basket");
        btnPurchase.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPurchase.setBorderPainted(false);
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });
        pnlBasket.add(btnPurchase);
        btnPurchase.setBounds(430, 430, 100, 40);

        txtBasketBill.setEditable(false);
        txtBasketBill.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        txtBasketBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBasketBillActionPerformed(evt);
            }
        });
        pnlBasket.add(txtBasketBill);
        txtBasketBill.setBounds(120, 430, 90, 40);

        jLabel19.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel19.setText("Total Bill");
        pnlBasket.add(jLabel19);
        jLabel19.setBounds(20, 440, 100, 30);

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel16.setText("Basket");
        pnlBasket.add(jLabel16);
        jLabel16.setBounds(10, 10, 70, 30);

        btnRecalculate.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnRecalculate.setText("RECALCULATE BILL");
        btnRecalculate.setToolTipText("");
        btnRecalculate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRecalculate.setBorderPainted(false);
        btnRecalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecalculateActionPerformed(evt);
            }
        });
        pnlBasket.add(btnRecalculate);
        btnRecalculate.setBounds(230, 430, 180, 40);

        jLabel1.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        jLabel1.setText("the quantity of an item.");
        pnlBasket.add(jLabel1);
        jLabel1.setBounds(10, 60, 250, 23);

        jLabel4.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        jLabel4.setText("Please click on recalculate bill when you tick an item to be deleted or change");
        pnlBasket.add(jLabel4);
        jLabel4.setBounds(10, 40, 560, 23);

        getContentPane().add(pnlBasket, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, 570, 480));

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel9.setText("Select you item");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 180, -1));

        getAccessibleContext().setAccessibleName("PurcahseItem2");

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void btnAddToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToBasketActionPerformed
        pnl1.setVisible(true);
        pnlBasket.setVisible(true);
        try {

            ShowBasketItems();
            CalculateFinalBill();
        } catch (ParseException ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddToBasketActionPerformed

    private void ShowBasketItems() throws ParseException {
        String sql = "Select PRODUCTID,NAME,PRICE, QUANTITY,DELETED from BASKET WHERE DELETED =FALSE";

        ResultSet rs = null;
        try {
            PreparedStatement statement = connection.prepareStatement("INSERT INTO BASKET(NAME, PRICE, QUANTITY,DELETED) VALUES(?,?,?,?)");
            statement.setString(1, txtItemName.getText());

            statement.setDouble(2, Double.parseDouble(txtItemPrice.getText().replace("Â£", "")));
            statement.setInt(3, Integer.parseInt((String) cmbQuantity.getSelectedItem()));
            statement.setBoolean(4, false);
            statement.execute();

            rs = StockData.connection.prepareStatement(sql).executeQuery();

        } catch (SQLException ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            CheckBoxRenderer checkBoxRenderer = new CheckBoxRenderer();

            basketTable.setModel(buildTableModel(rs));
            basketTable.getColumnModel().getColumn(4).setCellRenderer(checkBoxRenderer);
        } catch (SQLException ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void CalculateFinalBill() throws SQLException {
        String SumSQL = "SELECT SUM(PRICE*QUANTITY) FROM BASKET";
        PreparedStatement statement = StockData.connection.prepareStatement(SumSQL);
        ResultSet result = statement.executeQuery();
        result.next();
        String sum = result.getString(1);
        txtBasketBill.setText(sum);
    }


    private void txtBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBillActionPerformed

    private void cmbItemSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbItemSelectActionPerformed

    private void cmbQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbQuantityActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRecalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecalculateActionPerformed
        try {
            TableModel basketModel = basketTable.getModel();

            int rows = basketModel.getRowCount();

            for (int i = 0; i < rows; i++) {
                try {
                    if ((Boolean) basketModel.getValueAt(i, 4).equals(true)) {
                        PreparedStatement statement = StockData.connection.prepareStatement("DELETE FROM BASKET  WHERE PRODUCTID=?");
                        statement.setInt(1, (Integer) basketModel.getValueAt(i, 0));
                        statement.execute();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            String sql = "Select PRODUCTID,NAME,PRICE, QUANTITY,DELETED from BASKET WHERE DELETED =FALSE";
            ResultSet rs = null;
            rs = StockData.connection.prepareStatement(sql).executeQuery();
            try {
                CheckBoxRenderer checkBoxRenderer = new CheckBoxRenderer();

                basketTable.setModel(buildTableModel(rs));
                basketTable.getColumnModel().getColumn(4).setCellRenderer(checkBoxRenderer);
                
            } catch (SQLException ex) {
                Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
            }

            CalculateFinalBill();

        } catch (SQLException ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        basketTable.repaint();
    }//GEN-LAST:event_btnRecalculateActionPerformed

    private void txtBasketBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBasketBillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBasketBillActionPerformed

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        try {
            // TODO add your handling code here:
            //int key = Integer.valueOf(lblIemKey.getText());

            int rows = basketTable.getRowCount();

            for (int i = 0; i < rows; i++) {
                try {
                    int quantity = (int) basketTable.getValueAt(i, 3);
                    String itemName = (String) basketTable.getValueAt(i, 1);
                    String SQL = "UPDATE PRODUCTS SET QUANTITY = QUANTITY - ? WHERE NAME = ?";
                    PreparedStatement statement = StockData.connection.prepareStatement(SQL);
                    statement.setInt(1, quantity);
                    statement.setString(2, itemName);
                    statement.executeUpdate();
                } //StockData.UpdateStock(key);
                catch (SQLException ex) {
                    Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            saveTable();

            ImageIcon icon = new ImageIcon(getClass().getResource("/stock/Resources/tick.png"));
            JOptionPane.showMessageDialog(null,
                    "You're order has been placed.", "Confirmation", JOptionPane.INFORMATION_MESSAGE, icon);
           
            FileReader inputFile = new FileReader("Invoice.txt");
            BufferedReader br = new BufferedReader(inputFile);
            Invoice invoice = new Invoice();
            invoice.txtArea.read(br, "Invoice.txt");

            int confirm = JOptionPane.showConfirmDialog(null,
                    "Would you lik to view your invoice?", "Confirmation ", JOptionPane.YES_NO_OPTION);
            if (confirm == 0) {
                invoice.setVisible(true);
            }

            StockData.stmt.execute("DELETE FROM BASKET");
            CheckBoxRenderer checkBoxRenderer = new CheckBoxRenderer();
            String sql = "Select PRODUCTID,NAME,PRICE, QUANTITY,DELETED from BASKET WHERE DELETED =FALSE";
            ResultSet rs = null;
            rs = StockData.connection.prepareStatement(sql).executeQuery();
            DefaultTableModel model=buildTableModel(rs);   
            
            basketTable.setModel(model);
            basketTable.getColumnModel().getColumn(4).setCellRenderer(checkBoxRenderer);
            basketTable.getColumnModel().getColumn(4).setCellEditor(new MyTableCellEditor());
            
        } catch (Exception ex) {
            Logger.getLogger(PurchaseItem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPurchaseActionPerformed
    public void saveTable() throws Exception {
        BufferedWriter bfw = new BufferedWriter(new FileWriter("Invoice.txt"));
        for (int i = 0; i < basketTable.getColumnCount(); i++) {
            bfw.write(basketTable.getColumnName(i));
            bfw.write("\t\t");
        }

        for (int i = 0; i < basketTable.getRowCount(); i++) {
            bfw.newLine();
            for (int j = 0; j < basketTable.getColumnCount(); j++) {
                bfw.write(String.valueOf(basketTable.getValueAt(i, j)));
                bfw.write("\t\t");
            }
        }
        bfw.close();
    }

    private void txtStockInitialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockInitialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockInitialActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager ShStockDBPUEntityManager;
    private java.util.List<stock.Basket> basketList;
    private javax.persistence.Query basketQuery;
    private javax.swing.JTable basketTable;
    public javax.swing.JButton btnAddToBasket;
    public javax.swing.JButton btnPurchase;
    public javax.swing.JButton btnRecalculate;
    public javax.swing.JButton btnSearch;
    public javax.swing.JComboBox cmbItemSelect;
    public javax.swing.JComboBox cmbQuantity;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel15;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    public javax.swing.JLabel jLabel18;
    public javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lblIemKey;
    public javax.swing.JLabel lblPic;
    public javax.swing.JPanel pnl1;
    public javax.swing.JPanel pnl2;
    public javax.swing.JPanel pnlBasket;
    public java.awt.TextField txtBasketBill;
    public java.awt.TextField txtBill;
    public java.awt.TextField txtItemName;
    public java.awt.TextField txtItemPrice;
    public java.awt.TextField txtStockInitial;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Logo_1.png")));

    }

    public DefaultTableModel buildTableModel(ResultSet rs) 
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));

        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }

    public class CheckBoxRenderer extends JCheckBox implements TableCellRenderer {

        CheckBoxRenderer() {
            setHorizontalAlignment(JLabel.CENTER);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                //super.setBackground(table.getSelectionBackground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }
            
           // setSelected((value != null && ((Boolean) value).booleanValue()));
            if(value instanceof String){               
                setSelected(value != null && new Boolean((String)value)); 
            }
            else if (value instanceof Boolean)
             setSelected((value != null && ((Boolean) value).booleanValue())); 
            return this;
        }
    }
    
 class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {

  JComponent component = new JCheckBox();

  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
      int rowIndex, int vColIndex) {

    ((JCheckBox) component).setSelected(isSelected);

    return component;
  }

  public Object getCellEditorValue() {
    return ((JCheckBox) component).isSelected();
  }
}

}
